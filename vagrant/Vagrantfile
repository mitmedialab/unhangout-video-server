# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure(2) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "###VAGRANT_VM_BOX###"
  config.vm.box_check_update = false

  # In case the vagrant-vbguest plugin is installed, the auto-update can be
  # enabled after initial boot.
  config.vbguest && config.vbguest.auto_update = false

  # Share SSH locally by default
  config.vm.network :forwarded_port,
    guest: 22,
    host: ###SSH_PORT###,
    id: "ssh"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  config.vm.network "forwarded_port", guest: 9001, host: 9001

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.37.11"
  config.hostsupdater.aliases = ["###SALT_MINION_ID###"]

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  config.vm.synced_folder "###SALT_DIR###/", "/srv/salt/", owner: "root", group: "root"
  config.vm.synced_folder "###FREESWITCH_GIT_DIR###/", "/usr/local/src/freeswitch.git/", owner: "root", group: "root"
  # Uncomment this if you want a the GIT_CODE_DIR checkout on the host to be
  # available on the VM. Be sure to set [vm_dir] to the location you want the
  # directory to be available on the VM.
  #config.vm.synced_folder "###GIT_CODE_DIR###/", "[vm_dir]/", owner: "root", group: "root"



  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Don't boot with headless mode
  #   vb.gui = true
  #
  #   # Use VBoxManage to customize the VM. For example to change memory:
  #   vb.customize ["modifyvm", :id, "--memory", "1024"]
  # end
  #
  # View the documentation for the provider you're using for more
  # information on available options.

  # Enable provisioning with CFEngine. CFEngine Community packages are
  # automatically installed. For example, configure the host as a
  # policy server and optionally a policy file to run:
  #
  # config.vm.provision "cfengine" do |cf|
  #   cf.am_policy_hub = true
  #   # cf.run_file = "motd.cf"
  # end
  #
  # You can also configure and bootstrap a client to an existing
  # policy server:
  #
  # config.vm.provision "cfengine" do |cf|
  #   cf.policy_server_address = "10.0.2.15"
  # end

  # Enable provisioning with Puppet stand alone.  Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  # You will need to create the manifests directory and a manifest in
  # the file default.pp in the manifests_path directory.
  #
  # config.vm.provision "puppet" do |puppet|
  #   puppet.manifests_path = "manifests"
  #   puppet.manifest_file  = "default.pp"
  # end

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding
  # some recipes and/or roles.
  #
  # config.vm.provision "chef_solo" do |chef|
  #   chef.cookbooks_path = "../my-recipes/cookbooks"
  #   chef.roles_path = "../my-recipes/roles"
  #   chef.data_bags_path = "../my-recipes/data_bags"
  #   chef.add_recipe "mysql"
  #   chef.add_role "web"
  #
  #   # You may also specify custom JSON attributes:
  #   chef.json = { mysql_password: "foo" }
  # end

  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision "chef_client" do |chef|
  #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  #   chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  # If you're using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # If you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = "ORGNAME-validator"
  #config.vm.provision "shell", path: "boot.development"

  # This is in here because something is clogging up the regular DNS.
  #config.vm.provision :shell, run: "always" do |s|
  #  s.inline = "echo options single-request-reopen | sudo tee /etc/resolv.conf; echo nameserver 8.8.8.8 | sudo tee -a /etc/resolv.conf"
  #end

  # TODO: Remove this when https://github.com/mitchellh/vagrant/issues/5973 is fixed.
  config.vm.provision "shell", inline: "sudo mkdir -p /etc/salt && sudo cp /vagrant/salt/minion /etc/salt/"

  # This is a hack to load an SSH pubkey to the server if a valid one is found
  # on the host. Looks in the default location for RSA/DSA pubkeys.
  # NOTE: Should probably be rewritten as a vagrant plugin in the future.
  config.vm.provision "shell" do |s|
    ssh_dir = "#{Dir.home}/.ssh"
    ssh_pub_key_file = ""
    if File.readable?("#{ssh_dir}/id_rsa.pub") then
      ssh_pub_key_file = "#{ssh_dir}/id_rsa.pub"
    elsif File.readable?("#{ssh_dir}/id_dsa.pub") then
      ssh_pub_key_file = "#{ssh_dir}/id_dsa.pub"
    end
    if not ssh_pub_key_file.empty? then
      ssh_pub_key = File.readlines(ssh_pub_key_file).first.strip
      s.inline = <<-SHELL
        echo "Adding #{ssh_pub_key_file} to root and vagrant users authorized_keys file."
        echo "#{ssh_pub_key}" >> /home/vagrant/.ssh/authorized_keys
        sudo mkdir -p /root/.ssh
        sudo chown root:root /root/.ssh
        sudo chmod 700 /root/.ssh
        echo "#{ssh_pub_key}" | sudo tee -a /root/.ssh/authorized_keys
      SHELL
    else
      s.inline = <<-SHELL
        echo "No SSH pubkey found, for direct SSH access, one will need to be added to the VM."
      SHELL
    end
  end

  config.vm.provision :salt do |salt|
    salt.install_master = false
    salt.install_type = "git"
    salt.install_args = "v2014.7.6"
    # TODO: Uncomment this when https://github.com/mitchellh/vagrant/issues/5973 is fixed.
    #salt.minion_config = "salt/minion"
    # TODO: Uncomment these when a remote salt master is active.
    # salt.minion_key = "salt/key/minion.pem"
    # salt.minion_pub = "salt/key/minion.pub"
    salt.log_level = "info"
    salt.verbose = true
    salt.run_highstate = true
  end
end
